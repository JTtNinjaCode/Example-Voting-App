# version is now using "compose spec"
# v2 and v3 are now combined!
# docker-compose v1.27+ required

services:
  vote: # service 名稱，自己定義名稱
    build: # 使用特定路徑下的 Dockerfile 來建立 image
      context: ./vote
      target: dev # 使用 Dockerfile 中的特定 stage 來建立 image
    depends_on: # 在啟動此 service 之前，需要先啟動的 service
      redis:
        condition: service_healthy # 當 redis service 的健康狀態為 healthy 時，才會啟動 vote service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"] # curl 自己，檢查程式是否沒掛掉
      interval: 15s # 多久測一次
      timeout: 5s # 超時時間
      retries: 3 # 重試次數
      start_period: 10s # 如果
    volumes:
     - ./vote:/usr/local/app # 將本地目錄掛載到 container 內，這是執行的程式碼
    ports:
      - "8080:80" # 將 container 內的 80 port 對應到本地的 8080 port
    networks: # 將 service 加入到特定的 network 中
      - front-tier
      - back-tier

  result:
    build: ./result
    # use nodemon rather than node for local dev
    entrypoint: nodemon --inspect=0.0.0.0 server.js
    depends_on:
      db:
        condition: service_healthy # 當 db service 的健康狀態為 healthy 時，才會啟動 result service
    volumes:
      - ./result:/usr/local/app # 將本地目錄掛載到 container 內，這是執行的程式碼
    ports:
      - "8081:80"
      - "127.0.0.1:9229:9229"
    networks:
      - front-tier
      - back-tier

  worker:
    build:
      context: ./worker # 等同於直接寫 build: ./worker
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - back-tier

  redis:
    image: redis:alpine
    volumes:
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/redis.sh
      interval: "5s"
    networks:
      - back-tier

  db:
    image: postgres:15-alpine
    environment: # 環境變數
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks" # 將本地目錄掛載到 container 內，這裡面包含了健康檢查的腳本
    healthcheck: # 每隔五秒檢查一次是否正常執行
      test: /healthchecks/postgres.sh # 執行甚麼指令來健康檢查
      interval: "5s"
    networks:
      - back-tier

  # this service runs once to seed the database with votes
  # it won't run unless you specify the "seed" profile
  # docker compose --profile seed up -d
  seed:
    build: ./seed-data
    profiles: ["seed"]
    depends_on:
      vote:
        condition: service_healthy
    networks:
      - front-tier
    restart: "no" # 不重新啟動此服務

volumes:
  db-data:

networks:
  front-tier:
  back-tier:
